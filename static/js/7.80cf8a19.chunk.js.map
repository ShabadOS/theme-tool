{"version":3,"sources":["hooks/use-window-size.js","components/RatioBox.js"],"names":["useWindowSize","isClient","window","getSize","width","innerWidth","undefined","height","innerHeight","useState","windowSize","setWindowSize","useEffect","handleResize","addEventListener","removeEventListener","RatioBox","ratio","children","elementRef","useRef","useWindowResize","setParentSize","current","parentElement","clientWidth","clientHeight","ratioWidth","ratioHeight","writeCssToDom","className","ref","style","defaultProps"],"mappings":"oLA+BeA,EA5BO,WACpB,IAAMC,EAA6B,kBAAXC,OAExB,SAASC,IACP,MAAO,CACLC,MAAOH,EAAWC,OAAOG,gBAAaC,EACtCC,OAAQN,EAAWC,OAAOM,iBAAcF,GANlB,MAUYG,mBAAUN,GAVtB,mBAUlBO,EAVkB,KAUNC,EAVM,KAyB1B,OAbAC,qBAAW,WACT,IAAMX,EACJ,OAAO,EAGT,SAASY,IACPF,EAAeR,KAIjB,OADAD,OAAOY,iBAAkB,SAAUD,GAC5B,kBAAMX,OAAOa,oBAAqB,SAAUF,MAClD,IAEIH,G,QCpBHM,G,OAAW,SAAC,GAA2B,IAAxBC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,SACpBC,EAAaC,mBACbV,EAAaW,IAFuB,EAGGZ,mBAAU,CAAEL,MAAO,EAAGG,OAAQ,IAHjC,0BAGhCH,EAHgC,EAGhCA,MAAOG,EAHyB,EAGzBA,OAAUe,EAHe,KAK1CV,qBAAW,WACT,GAAMO,EAAWI,QAAjB,CADe,MAG0CJ,EAAWI,QAA5DC,cAAiBC,EAHV,EAGUA,YAAaC,EAHvB,EAGuBA,aACtCJ,EAAe,CAAElB,MAAOqB,EAAalB,OAAQmB,OAC5C,CAAEhB,IAEL,IAAIiB,EAAapB,EAASU,EACtBW,EAAcrB,EAWlB,OATKoB,EAAavB,IAChBuB,EAAavB,EACbwB,EAAcxB,EAAQa,GAIxBY,YAAe,cAAeD,EAAclB,EAAWH,QACvDsB,YAAe,cAAeF,EAAajB,EAAWN,OAGpD,yBAAK0B,UAAU,aAEb,yBAAKA,UAAU,QAAQC,IAAKZ,EAAYa,MAAO,CAAE5B,MAAOuB,EAAYpB,OAAQqB,IACzEV,MAYTF,EAASiB,aAAe,CACtBhB,MAAO,GAGMD","file":"static/js/7.80cf8a19.chunk.js","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState, useEffect } from 'react'\n\nconst useWindowSize = () => {\n  const isClient = typeof window === 'object'\n\n  function getSize() {\n    return {\n      width: isClient ? window.innerWidth : undefined,\n      height: isClient ? window.innerHeight : undefined,\n    }\n  }\n\n  const [ windowSize, setWindowSize ] = useState( getSize )\n\n  useEffect( () => {\n    if ( !isClient ) {\n      return false\n    }\n\n    function handleResize() {\n      setWindowSize( getSize() )\n    }\n\n    window.addEventListener( 'resize', handleResize )\n    return () => window.removeEventListener( 'resize', handleResize )\n  }, [ ] ) // Empty array ensures that effect is only run on mount and unmount\n\n  return windowSize\n}\n\nexport default useWindowSize\n","import React, { useRef, useEffect, useState } from 'react'\nimport { node, number } from 'prop-types'\n\nimport useWindowResize from '../hooks/use-window-size'\nimport { writeCssToDom } from '../lib/utils'\n\nimport './RatioBox.css'\n\nconst RatioBox = ( { ratio, children } ) => {\n  const elementRef = useRef()\n  const windowSize = useWindowResize()\n  const [ { width, height }, setParentSize ] = useState( { width: 0, height: 0 } )\n\n  useEffect( () => {\n    if ( !elementRef.current ) return\n\n    const { parentElement: { clientWidth, clientHeight } } = elementRef.current\n    setParentSize( { width: clientWidth, height: clientHeight } )\n  }, [ windowSize ] )\n\n  let ratioWidth = height * ratio\n  let ratioHeight = height\n\n  if ( ratioWidth > width ) {\n    ratioWidth = width\n    ratioHeight = width / ratio\n  }\n\n  // Use parent window dimensions for ratio factor\n  writeCssToDom( '--vh-factor', ratioHeight / windowSize.height )\n  writeCssToDom( '--vw-factor', ratioWidth / windowSize.width )\n\n  return (\n    <div className=\"ratio-box\">\n\n      <div className=\"inner\" ref={elementRef} style={{ width: ratioWidth, height: ratioHeight }}>\n        {children}\n      </div>\n\n    </div>\n  )\n}\n\nRatioBox.propTypes = {\n  ratio: number,\n  children: node.isRequired,\n}\n\nRatioBox.defaultProps = {\n  ratio: 0,\n}\n\nexport default RatioBox\n"],"sourceRoot":""}