{"version":3,"sources":["components/Preview.js"],"names":["Overlay","className","gurmukhi","punjabiTranslation","englishTranslation","spanishTranslation","englishTransliteration","hindiTransliteration","urduTransliteration","useContext","SettingsContext","settings","line","partitionLine","map","lineIndex","key","i","word","type","classNames","translations","filter","transliterations","larivaar","larivaarGurbani","assist","larivaarAssist","name","translation","transliteration","classifyWords","defaultProps"],"mappings":"qNAkBMA,G,OAAU,SAAC,GAST,IARNC,EAQK,EARLA,UACAC,EAOK,EAPLA,SACAC,EAMK,EANLA,mBACAC,EAKK,EALLA,mBACAC,EAIK,EAJLA,mBACAC,EAGK,EAHLA,uBACAC,EAEK,EAFLA,qBACAC,EACK,EADLA,oBACK,EACgBC,qBAAYC,KAAzBC,EADH,oBAECC,EAAOC,YAAeX,GACzBY,KAAK,SAAEF,EAAMG,GAAR,OACJ,0BAAMC,IAAKD,GACRH,EAAKE,KAAK,WAAkBG,GAAlB,IAAIC,EAAJ,EAAIA,KAAMC,EAAV,EAAUA,KAAV,OAAyB,0BAAMH,IAAG,UAAKE,EAAL,YAAaC,EAAb,YAAqBF,GAAKhB,UAAWmB,IAAYD,EAAM,SAAWD,UAI/GG,EAAe,CACnB,CAAE,UAAWjB,EAAoBO,EAASP,oBAC1C,CAAE,UAAWD,EAAoBQ,EAASR,oBAC1C,CAAE,UAAWE,EAAoBM,EAASN,qBAC1CiB,QAAQ,0CAEJC,EAAmB,CACvB,CAAE,UAAWjB,EAAwBK,EAASL,wBAC9C,CAAE,QAASC,EAAsBI,EAASJ,sBAC1C,CAAE,OAAQC,EAAqBG,EAASH,sBACxCc,QAAQ,0CAEV,OACE,yBAAKrB,UAAU,WAEb,yBAAKA,UAAWmB,IAAYnB,EAAW,CACrCuB,SAAUb,EAASc,gBACnBC,OAAQf,EAASc,iBAAmBd,EAASgB,gBAC5C,iBAGD,uBAAG1B,UAAU,YAEX,0BAAMA,UAAU,QACbW,IAKJS,EAAaP,KAAK,mCAAIc,EAAJ,KAAUC,EAAV,YACjB,uBAAGb,IAAG,UAAKY,EAAL,YAAaC,GAAe5B,UAAWmB,IAAYQ,EAAM,gBAE7D,0BAAM3B,UAAU,QACb4B,OAMNN,EAAiBT,KAAK,mCAAIc,EAAJ,KAAUE,EAAV,YACrB,uBAAGd,IAAG,UAAKY,EAAL,YAAaE,GAAmB7B,UAAWmB,IAAYQ,EAAM,oBAEjE,0BAAM3B,UAAU,QACb8B,YAAeD,GAAiB,GAAOhB,KACtC,WAAkBG,GAAlB,IAAIC,EAAJ,EAAIA,KAAMC,EAAV,EAAUA,KAAV,OAAyB,0BAAMH,IAAG,UAAKE,EAAL,YAAaC,EAAb,YAAqBF,GAAKhB,UAAWmB,IAAYD,EAAM,SAAWD,eAyBpHlB,EAAQgC,aAAe,CACrB/B,UAAW,KACXG,oBAAoB,EACpBC,oBAAoB,EACpBF,oBAAoB,EACpBG,wBAAwB,EACxBC,sBAAsB,EACtBC,qBAAqB,GAGRR","file":"static/js/5.b9024de5.chunk.js","sourcesContent":["import React, { useContext } from 'react'\nimport classNames from 'classnames'\nimport { string, bool, oneOfType } from 'prop-types'\n\nimport { partitionLine, classifyWords } from '../lib/utils'\nimport { SettingsContext } from '../lib/contexts'\n\nimport './Preview.css'\n\n/**\n * Overlay Line Component.\n * Renders the various aspects of a single line.\n * @param {string} className An optional class name to append.\n * @param {string} gurmukhi The Gurmukhi of the line to render.\n * @param {string} punjabiTranslation The Punjabi translation of the line to render.\n * @param {string} englishTranslation The English translation of the line to render.\n * @param {string} transliteration The English transliteration of the line to render.\n */\nconst Overlay = ( {\n  className,\n  gurmukhi,\n  punjabiTranslation,\n  englishTranslation,\n  spanishTranslation,\n  englishTransliteration,\n  hindiTransliteration,\n  urduTransliteration,\n} ) => {\n  const [ settings ] = useContext( SettingsContext )\n  const line = partitionLine( gurmukhi )\n    .map( ( line, lineIndex ) => (\n      <span key={lineIndex}>\n        {line.map( ( { word, type }, i ) => <span key={`${word}-${type}-${i}`} className={classNames( type, 'word' )}>{word}</span> )}\n      </span>\n    ) )\n\n  const translations = [\n    [ 'english', englishTranslation, settings.englishTranslation ],\n    [ 'punjabi', punjabiTranslation, settings.punjabiTranslation ],\n    [ 'spanish', spanishTranslation, settings.spanishTranslation ],\n  ].filter( ( [ , , enabled ] ) => enabled )\n\n  const transliterations = [\n    [ 'english', englishTransliteration, settings.englishTransliteration ],\n    [ 'hindi', hindiTransliteration, settings.hindiTransliteration ],\n    [ 'urdu', urduTransliteration, settings.urduTransliteration ],\n  ].filter( ( [ , , enabled ] ) => enabled )\n\n  return (\n    <div className=\"overlay\">\n\n      <div className={classNames( className, {\n        larivaar: settings.larivaarGurbani,\n        assist: settings.larivaarGurbani && settings.larivaarAssist,\n      }, 'overlay-line' )}\n      >\n\n        <p className=\"gurmukhi\">\n\n          <span className=\"text\">\n            {line}\n          </span>\n\n        </p>\n\n        {translations.map( ( [ name, translation ] ) => (\n          <p key={`${name}-${translation}`} className={classNames( name, 'translation' )}>\n\n            <span className=\"text\">\n              {translation}\n            </span>\n\n          </p>\n        ) )}\n\n        {transliterations.map( ( [ name, transliteration ] ) => (\n          <p key={`${name}-${transliteration}`} className={classNames( name, 'transliteration' )}>\n\n            <span className=\"text\">\n              {classifyWords( transliteration, true ).map(\n                ( { word, type }, i ) => <span key={`${word}-${type}-${i}`} className={classNames( type, 'word' )}>{word}</span>,\n              )}\n            </span>\n\n          </p>\n        ) )}\n\n      </div>\n\n    </div>\n\n  )\n}\n\nOverlay.propTypes = {\n  className: string,\n  gurmukhi: string.isRequired,\n  punjabiTranslation: oneOfType( [ string, bool ] ),\n  englishTranslation: oneOfType( [ string, bool ] ),\n  spanishTranslation: oneOfType( [ string, bool ] ),\n  englishTransliteration: oneOfType( [ string, bool ] ),\n  hindiTransliteration: oneOfType( [ string, bool ] ),\n  urduTransliteration: oneOfType( [ string, bool ] ),\n}\n\nOverlay.defaultProps = {\n  className: null,\n  englishTranslation: false,\n  spanishTranslation: false,\n  punjabiTranslation: false,\n  englishTransliteration: false,\n  hindiTransliteration: false,\n  urduTransliteration: false,\n}\n\nexport default Overlay\n"],"sourceRoot":""}