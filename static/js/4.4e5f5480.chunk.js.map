{"version":3,"sources":["components/SettingComponent.js","components/EditorPanel.js"],"names":["Slider","value","units","storageKey","onChange","props","valueLabelDisplay","split","_event","newValue","defaultProps","Dropdown","name","values","key","map","Button","className","variant","PopoverColorPicker","useState","anchorEl","setAnchorEl","open","Boolean","id","undefined","icon","faSquare","onClick","event","currentTarget","size","color","onClose","anchorOrigin","vertical","horizontal","transformOrigin","rgb","r","g","b","a","Checkbox","checkedIcon","checked","JSON","parse","target","typeComponents","OPTION_TYPES","dropdown","toggle","initial","slider","popoverColorPicker","checkbox","type","ExportEditor","lazy","EditorPanel","useContext","SettingsContext","settings","setSettings","TABS","tabName","setTab","lightTheme","createMuiTheme","palette","primary","main","secondary","contrastThreshold","tonalOffset","orientation","indicatorColor","textColor","scrollButtons","label","faSave","theme","fallback","filter","tab","options","p","optionName","OPTIONS","Setting","SettingFactory","padding","localStorage"],"mappings":"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","file":"static/js/4.4e5f5480.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport {\n  any,\n  func,\n  bool,\n  string,\n  number,\n  arrayOf,\n  oneOfType,\n  shape,\n} from 'prop-types'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSquare } from '@fortawesome/free-solid-svg-icons'\n\nimport {\n  Select,\n  Switch,\n  Popover,\n  MenuItem,\n  Slider as MaterialSlider,\n  Button as MaterialButton,\n  Checkbox as MaterialCheckbox,\n} from '@material-ui/core'\n\nimport { SketchPicker } from 'react-color'\n\nimport { OPTION_TYPES } from '../lib/options'\n\nimport './SettingComponent.css'\n\nexport const Toggle = ( { initial, value, onChange, ...props } ) => (\n  <Switch\n    checked={JSON.parse( value )}\n    onChange={event => onChange( event.target.checked )}\n    {...props}\n  />\n)\n\nToggle.propTypes = {\n  initial: bool.isRequired,\n  value: oneOfType( [ string, bool ] ).isRequired,\n  onChange: func.isRequired,\n}\n\nexport const Slider = ( { value, storageKey, units, onChange, ...props } ) => (\n  <MaterialSlider\n    valueLabelDisplay=\"auto\"\n    value={+( units ? value.split( units )[0] : value )}\n    onChange={( _event, newValue ) => onChange( units ? `${newValue}${units}` : `${newValue}` )}\n    {...props}\n  />\n)\n\nSlider.propTypes = {\n  value: oneOfType( [ string, number ] ).isRequired,\n  units: string,\n  storageKey: string,\n  onChange: func.isRequired,\n}\n\nSlider.defaultProps = {\n  storageKey: null,\n  units: null,\n}\n\nexport const Dropdown = ( { name, storageKey, value, values, onChange, ...props } ) => (\n  <Select\n    value={value}\n    onChange={( _event, { key } ) => { onChange( key ) }}\n    {...props}\n  >\n\n    {values.map(\n      ( { name, value } ) => <MenuItem key={value} value={value}>{name || value}</MenuItem>,\n    )}\n\n  </Select>\n)\n\nDropdown.propTypes = {\n  name: string.isRequired,\n  storageKey: string,\n  values: arrayOf( any ).isRequired,\n  onChange: func.isRequired,\n  value: oneOfType( [ string, number ] ).isRequired,\n}\n\nDropdown.defaultProps = { storageKey: null }\n\nexport const Button = ( { className, ...props } ) => (\n  <MaterialButton variant=\"contained\" {...props} />\n)\n\nButton.propTypes = { className: string }\nButton.defaultProps = { className: null }\n\nexport const PopoverColorPicker = ( { name, value, storageKey, onChange, ...props } ) => {\n  const [ anchorEl, setAnchorEl ] = useState( null )\n  const open = Boolean( anchorEl )\n  const id = open ? 'simple-popover' : undefined\n\n  const handleClick = event => {\n    setAnchorEl( event.currentTarget )\n  }\n\n  const handleClose = () => {\n    setAnchorEl( null )\n  }\n\n  return (\n    <div>\n      <FontAwesomeIcon\n        icon={faSquare}\n        onClick={handleClick}\n        size=\"lg\"\n        color={value}\n      />\n\n      <Popover\n        id={id}\n        anchorEl={anchorEl}\n        open={open}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'right',\n        }}\n        transformOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left',\n        }}\n      >\n\n        <SketchPicker\n          className=\"colorPicker\"\n          color={value}\n          onChange={( { rgb } ) => { onChange( `rgba(${rgb.r},${rgb.g},${rgb.b},${rgb.a})` ) }}\n          {...props}\n        />\n\n      </Popover>\n\n    </div>\n  )\n}\n\nPopoverColorPicker.propTypes = {\n  value: string.isRequired,\n  name: string.isRequired,\n  storageKey: string,\n  onChange: func.isRequired,\n}\n\nPopoverColorPicker.defaultProps = { storageKey: null }\n\nexport const Checkbox = ( { name, value, storageKey, icon, checkedIcon, onChange, ...props } ) => (\n  <div className=\"setting-checkbox\">\n    <MaterialCheckbox\n      icon={( <FontAwesomeIcon icon={icon} /> )}\n      checkedIcon={( <FontAwesomeIcon icon={checkedIcon} /> )}\n      checked={JSON.parse( value )}\n      onChange={( { target: { checked } } ) => onChange( checked )}\n      {...props}\n    />\n  </div>\n)\n\nCheckbox.propTypes = {\n  value: string.isRequired,\n  name: string.isRequired,\n  storageKey: string,\n  onChange: func.isRequired,\n  icon: shape( {} ),\n  checkedIcon: shape( {} ),\n}\n\nCheckbox.defaultProps = { storageKey: null, checkedIcon: null, icon: null }\n\nconst typeComponents = {\n  [OPTION_TYPES.dropdown]: Dropdown,\n  [OPTION_TYPES.toggle]: Toggle,\n  [OPTION_TYPES.slider]: Slider,\n  [OPTION_TYPES.popoverColorPicker]: PopoverColorPicker,\n  [OPTION_TYPES.checkbox]: Checkbox,\n}\n\nexport default type => typeComponents[type]\n","import React, { useContext, lazy, Suspense, useState } from 'react'\nimport {\n  Box,\n  Tab,\n  Tabs,\n  Typography,\n} from '@material-ui/core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSave } from '@fortawesome/free-solid-svg-icons'\n\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles'\nimport { TABS, OPTIONS } from '../lib/options'\nimport { SettingsContext } from '../lib/contexts'\n\nimport SettingFactory from './SettingComponent'\n\nimport './EditorPanel.css'\n\nconst ExportEditor = lazy( () => import( './editors/ExportEditor' ) )\n\nconst EditorPanel = () => {\n  const [ settings, setSettings ] = useContext( SettingsContext )\n  const [ tabName, setTab ] = useState( TABS[0].name )\n\n  const handleChange = ( _event, value ) => setTab( value )\n\n  const lightTheme = createMuiTheme( {\n    palette: {\n      type: 'light',\n      primary: {\n        main: '#693E4B',\n      },\n      secondary: {\n        main: '#693E4B',\n      },\n    },\n    contrastThreshold: 3,\n    tonalOffset: 0.2,\n  } )\n\n  return (\n    <div className=\"editor-panel\">\n\n      <Tabs\n        orientation=\"vertical\"\n        value={tabName}\n        onChange={handleChange}\n        indicatorColor=\"primary\"\n        textColor=\"primary\"\n        variant=\"scrollable\"\n        scrollButtons=\"auto\"\n        className=\"tabs\"\n      >\n        {TABS.map( ( { name, icon } ) => <Tab key={name} label={name} icon={<FontAwesomeIcon icon={icon} size=\"2x\" />} value={name} /> )}\n\n        <Tab label=\"Export\" icon={<FontAwesomeIcon icon={faSave} size=\"2x\" />} value=\"Export\" />\n\n      </Tabs>\n\n      <ThemeProvider theme={lightTheme}>\n\n        <Suspense fallback={<div>loading...</div>}>\n          {tabName === 'Export' && <ExportEditor />}\n        </Suspense>\n\n        {TABS\n          .filter( ( { name } ) => name === tabName )\n          .map( ( { name: tab, options } ) => (\n            <Box key={tab} className=\"pane\" p={2}>\n              {options.map( optionName => {\n              // Grab the actual option\n                const { name, type, storageKey, ...props } = OPTIONS[optionName]\n\n                // Get the component for the given type\n                const Setting = SettingFactory( type )\n\n                // onChange for any setting\n                const onChange = value => setSettings( { [optionName]: value } )\n\n                return name && (\n                <Box key={optionName} className=\"option\" padding=\"0.3em 0\">\n\n                  <Typography className=\"option-label\">{name}</Typography>\n\n                  <Setting\n                    className=\"option-worker\"\n                    name={optionName}\n                    value={settings[optionName] || localStorage[storageKey]}\n                    onChange={onChange}\n                    {...props}\n                  />\n\n                </Box>\n                )\n              } )}\n\n            </Box>\n          ) )}\n\n      </ThemeProvider>\n\n    </div>\n  )\n}\n\nexport default EditorPanel\n"],"sourceRoot":""}